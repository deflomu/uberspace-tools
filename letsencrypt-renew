#!/bin/sh
valid_days=21
letsencrypt_dir=~/.config/letsencrypt
cert_dir=${letsencrypt_dir}/live
cert_file='cert.pem'
domain=$(grep -e "[ \t]*domains.*" ${letsencrypt_dir}/cli.ini| sed "s/ //g" |cut -d "=" -f2 | cut -d "," -f1)
force=0

usage() {
  cat >&2 <<__EOF__

Usage:
$0  [-s wait-time] [-f]

Options:
  -s wait-time     time in seconds to wait before checking for
                   certificate renewal
  -f               force renewal, even if certificate is still valid

__EOF__

}


if [ "$domain" == "" ]; then
  echo "the 'domains' variable in ${letsencrypt_dir} seems to be malformed or missing."
  echo "Please check this file. (Hint: have you run uberspace-letsencrypt already?)"
  exit 1
fi

# process arguments
while getopts ":s:f" opt; do
  case "$opt" in
    s)
      # sleep x seconds - if x is an integer, else do nothing
      re='^[0-9]+$'
      if [[ "$OPTARG" =~ $re ]] ; then
        sleep $OPTARG
      else
        echo "Invalid option: -$OPTARG is no Integer" >&2
        usage
      fi
      ;;
    f)
      force=1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      exit 1
      ;;
  esac
done
#shift $((OPTIND-1))


# find all certificates
export cert="$(find $cert_dir/$domain/ -iname $cert_file | sort -k1)"

# check certificate validation date
openssl x509 -checkend $(( $valid_days * 86400 )) -in "$cert" > /dev/null

# renew certificates if they are less than only 10 more days valid
if [ $? != 0 -o "$force" == 1 ]; then

  # Try to get path of new certificate from letsencrypt script.
  # This is an *ugly* hack - but I don't know another workaround for a bug
  # (or missing feature) in LetsEncrypt, see
  # https://github.com/letsencrypt/letsencrypt/issues/2071
  # Especially, if a domain.tld was removed from cli.ini, LetsEncrypt does not
  # use the old directory/certificate, but creates a new one with the ugly name
  # domain.tld-0001 - and leaves the old cert untouched.
  # If we would just "renew" it with the old path, the new cert would be created,
  # but not used, and the old one would expire!
  #
  # Here we search for fullchain.pem ang suck out the paths string using sed:
  $new_cert=`letsencrypt certonly -d $domain | grep "/fullchain.pem" | sed "s/\(\/.*\/fullchain.pem\).*/\1"`

  if [ "$new_cert" == "" ]; then
    echo "Error parsing the file path of the new certificate."
    echo "Please check manually wether the certificate was created"
    echo "and add it to the webserver using uberspace-add-certificate."
    exit 1
  elif [ "$new_cert" == "$cert_dir/$domain/$cert_file" ]; then
    # cert path has not changed
    uberspace-prepare-certificate -k $cert_dir/$domain/privkey.pem -c $cert_dir/$domain/$cert_file
  else
    # cert path has changed, probably to domain.tld-0001 etc.
    $cert_dir=${dirname $new_cert}
    echo "WARNING: The path to the certificate has changed (maybe LetsEncrypt "
    echo "generated a new one with a new path?...)"
    uberspace-prepare-certificate -k $cert_dir/privkey.pem -c $cert_dir/fullchain.pem
  fi
fi
